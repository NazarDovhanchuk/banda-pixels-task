{"version":3,"sources":["redux/actions.ts","constans.tsx","components/Todo/components/TodoFilter/index.tsx","components/Todo/components/TodoItem/index.tsx","components/Todo/components/TodoList/index.tsx","components/Todo/components/TodoInput/index.tsx","components/Todo/index.tsx","redux/states.ts","redux/visibilityFilter.ts","redux/store.ts","redux/todo.ts","App.tsx","index.tsx"],"names":["ADD_TODO","DELETE_TODO","TOGGLE_TODO","SET_FILTER","VISIBILITY_FILTERS","ALL","COMPLETED","INCOMPLETE","TodoFilter","dispatch","useDispatch","mappedFilters","Object","keys","map","filterKey","currentFilter","Button","onClick","type","payload","TodoItem","todo","isCompleted","ListItem","Checkbox","checked","onChange","todoId","id","inputProps","ListItemText","primary","name","className","cx","IconButton","aria-label","color","TodoList","visibilityFilter","useSelector","state","allTodos","useState","todoList","setTodoList","useEffect","sortTodo","filter","List","TodoInput","setName","Input","placeholder","value","e","target","style","width","uuid","variant","Todo","todos","initialState","action","rootStore","combineReducers","store","createStore","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a79a41bc.chunk.js","sourcesContent":["export const ADD_TODO = \"ADD_TODO\";\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\nexport const SET_FILTER = \"SET_FILTER\";\n\nexport function addTodo(todo: { id: string; name: string; isCompleted: boolean; }) {\n  return {\n    type: ADD_TODO,\n    payload: todo,\n  }\n}\n\nexport function deleteTodo(todoId: number) {\n  return {\n    type: DELETE_TODO,\n    payload: todoId,\n  }\n}\n\nexport function toggleTodo(todoId: number) {\n  return {\n    type: TOGGLE_TODO,\n    payload: todoId\n  }\n};\n\nexport function setFilter(filter: any) {\n  return {\n    type: SET_FILTER,\n    payload: filter\n  }\n}\n","export const VISIBILITY_FILTERS = {\n  ALL: \"All\",\n  COMPLETED: \"Completed\",\n  INCOMPLETE: \"Incomplete\"\n};","import { useDispatch } from \"react-redux\";\nimport { Button } from '@material-ui/core/';\n\nimport { setFilter } from '../../../../redux/actions';\nimport { VISIBILITY_FILTERS } from \"../../../../constans\";\n\nimport './style.scss';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const mappedFilters: any = VISIBILITY_FILTERS;\n\n  return (\n    <div>\n      {Object.keys(mappedFilters).map((filterKey: string) => {\n        const currentFilter = mappedFilters[filterKey];\n\n        return (\n          <Button\n            key={currentFilter} onClick={() => dispatch(setFilter(currentFilter))}\n          >{currentFilter}\n          </Button>\n        )\n      })}\n    </div>\n  )\n}\n","import { useDispatch } from 'react-redux';\nimport { Checkbox, IconButton, ListItem, ListItemText } from '@material-ui/core/';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport cx from \"classnames\";\n\nimport { deleteTodo, toggleTodo } from '../../../../redux/actions';\n\nimport \"./style.scss\";\n\ninterface TodoItemProps {\n  todo: {\n    id: number,\n    name: string,\n    isCompleted: boolean\n  }\n}\n\nexport const TodoItem: React.FC<TodoItemProps> = ({ todo }) => {\n  const { isCompleted } = todo;\n  let dispatch = useDispatch();\n  const deleteHandler = () => dispatch(deleteTodo(todo.id));\n  const toggleHandler = () => dispatch(toggleTodo(todo.id));\n  return (\n    <div>\n      <ListItem>\n        <Checkbox\n          checked={isCompleted}\n          onChange={toggleHandler}\n          inputProps={{ 'aria-label': 'primary checkbox' }}\n        />\n        <ListItemText primary={todo.name} className={cx(\n          \"todo__item\",\n          todo && todo.isCompleted && \"todo__item-completed\"\n        )} />\n        <IconButton aria-label=\"delete\" onClick={deleteHandler} color=\"secondary\">\n          <DeleteIcon />\n        </IconButton>\n      </ListItem>\n    </div >\n  );\n}\n","import { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { List } from '@material-ui/core/';\n\nimport { TodoItem } from '../TodoItem';\nimport { VISIBILITY_FILTERS } from \"../../../../constans\";\ninterface AllTodos {\n  todo: Array<{\n    id: number,\n    name: string,\n    isCompleted: boolean\n  }>,\n}\ninterface VisibilityFilter {\n  visibilityFilter: Array<{\n    id: number,\n    name: string,\n    isCompleted: boolean\n  }>;\n}\n\nexport const TodoList: React.FC = () => {\n  let visibilityFilter: any = useSelector<VisibilityFilter>(state => state.visibilityFilter);\n  const allTodos: any = useSelector<AllTodos>(state => state.todo);\n  let [todoList, setTodoList] = useState(allTodos);\n\n  useEffect(() => {\n    let sortTodo: any = [];\n    if (visibilityFilter === VISIBILITY_FILTERS.ALL) {\n      sortTodo = allTodos;\n    }\n\n    if (visibilityFilter === VISIBILITY_FILTERS.COMPLETED) {\n      sortTodo = allTodos.filter((todo: { isCompleted: boolean; }) => todo.isCompleted);\n    }\n\n    if (visibilityFilter === VISIBILITY_FILTERS.INCOMPLETE) {\n      sortTodo = allTodos.filter((todo: { isCompleted: boolean; }) => !todo.isCompleted)\n    }\n\n    setTodoList(sortTodo)\n  }, [allTodos, visibilityFilter])\n\n  return (\n    <div>\n      <List>\n        {todoList.map((todo: { id: any; name: string; isCompleted: boolean; }) => {\n          return <TodoItem key={todo.id} todo={todo} />;\n        })}\n      </List>\n    </div>\n  )\n}\n\n","\nimport { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Input, Button } from '@material-ui/core/';\nimport { v1 as uuid } from 'uuid';\n\nimport { addTodo } from '../../../../redux/actions';\n\nimport \"./style.scss\";\n\nexport const TodoInput: React.FC = () => {\n  let [name, setName] = useState('');\n  let dispatch = useDispatch();\n\n  const addHandler = () => {\n    dispatch(addTodo(\n      {\n        id: uuid(),\n        name: name,\n        isCompleted: false,\n      }\n    ));\n    setName('')\n  }\n  return (\n    <header className=\"header\">\n      <h1 className=\"header__title\">TodoApp</h1>\n      <div className=\"header__input\">\n        <Input\n          placeholder=\"Enter your task\"\n          value={name}\n          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setName(e.target.value)}\n          inputProps={{\n            \"aria-label\": \"Description\"\n          }}\n          style={{ width: \"100%\" }}\n        />\n        <Button\n          onClick={addHandler}\n          variant=\"contained\"\n          color=\"primary\"\n          style={{ width: \"10%\" }}\n        >Add\n      </Button>\n      </div>\n    </header>\n  );\n}","import { TodoFilter } from './components/TodoFilter';\nimport { TodoList } from './components/TodoList';\nimport { TodoInput } from './components/TodoInput';\n\nimport \"./style.scss\";\n\nexport const Todo: React.FC = () => {\n  return (\n    <section className=\"todo\">\n      <TodoInput />\n      <TodoList />\n      <TodoFilter />\n    </section>\n  );\n}\n","import { v1 as uuid } from 'uuid';\n\nexport let todos = [\n  {\n    id: uuid(),\n    name: \"Done Task\",\n    isCompleted: false,\n  },\n]\n","import { SET_FILTER } from \"./actions\";\nimport { VISIBILITY_FILTERS } from '../constans';\n\nconst initialState = VISIBILITY_FILTERS.ALL;\n\nconst visibilityFilter = (state = initialState, action: any) => {\n  switch (action.type) {\n    case SET_FILTER: {\n      return action.payload;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default visibilityFilter;","import { createStore } from 'redux';\nimport { todo } from './todo';\nimport visibilityFilter from './visibilityFilter';\nimport { combineReducers } from 'redux';\n\n\nexport let rootStore = combineReducers({ todo, visibilityFilter });\n\nexport let store = createStore(rootStore);\n","import { ADD_TODO, DELETE_TODO, TOGGLE_TODO } from './actions';\nimport { todos } from './states';\n\nexport const todo = (state = todos, action: { type: any; payload: string; }) => {\n  let newTodos;\n  switch (action.type) {\n    case ADD_TODO:\n      return [...state, action.payload]\n    case DELETE_TODO:\n      return [...state].filter(todo => todo.id !== action.payload);\n    case TOGGLE_TODO:\n      newTodos = [...state];\n      return newTodos.map(todo => {\n        return (todo.id === action.payload)\n          ? {\n            ...todo,\n            isCompleted: !todo.isCompleted\n          }\n          : {\n            ...todo\n          }\n      })\n    default:\n  }\n  return state;\n}","import { Provider } from 'react-redux';\nimport { Todo } from './components/Todo'\n\nimport { store } from './redux/store';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Todo />\n    </Provider>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render((<App />), document.getElementById('root'))"],"sourceRoot":""}